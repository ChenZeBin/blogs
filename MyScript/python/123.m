// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/battle/battle_rivals_recommend_api.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import <IESLiveKit/BattleRivalsRecommendApi.pbobjc.h>
#import <IESLiveKit/Battle.pbobjc.h>
#import <IESLiveKit/LiveCommon.pbobjc.h>
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - BattleRivalsRecommendApiRoot

@implementation BattleRivalsRecommendApiRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[HTSLiveCommonRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - BattleRivalsRecommendApiRoot_FileDescriptor

static GPBFileDescriptor *BattleRivalsRecommendApiRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"webcast.api.battle"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum EntranceType

GPBEnumDescriptor *EntranceType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Search\000";
    static const int32_t values[] = {
        EntranceType_Search,
    };
    static const char *extraTextFormatInfo = "\001\000\006\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(EntranceType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:EntranceType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL EntranceType_IsValidValue(int32_t value__) {
  switch (value__) {
    case EntranceType_Search:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Tab

@implementation Tab

@dynamic name;
@dynamic title;

typedef struct Tab__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *title;
} Tab__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = Tab_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Tab__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = Tab_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Tab__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Tab class]
                                     rootClass:[BattleRivalsRecommendApiRoot class]
                                          file:BattleRivalsRecommendApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Tab__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RivalsRecommendResponse

@implementation RivalsRecommendResponse

@dynamic hasData_p, data_p;

typedef struct RivalsRecommendResponse__storage_ {
  uint32_t _has_storage_[1];
  RivalsRecommendResponse_ResponseData *data_p;
} RivalsRecommendResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "data_p",
        .dataTypeSpecific.className = GPBStringifySymbol(RivalsRecommendResponse_ResponseData),
        .number = RivalsRecommendResponse_FieldNumber_Data_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RivalsRecommendResponse__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RivalsRecommendResponse class]
                                     rootClass:[BattleRivalsRecommendApiRoot class]
                                          file:BattleRivalsRecommendApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RivalsRecommendResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RivalsRecommendResponse_TabRivals

@implementation RivalsRecommendResponse_TabRivals

@dynamic rivalsArray, rivalsArray_Count;
@dynamic hasTab, tab;

typedef struct RivalsRecommendResponse_TabRivals__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *rivalsArray;
  Tab *tab;
} RivalsRecommendResponse_TabRivals__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rivalsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(BattleRival),
        .number = RivalsRecommendResponse_TabRivals_FieldNumber_RivalsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RivalsRecommendResponse_TabRivals__storage_, rivalsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tab",
        .dataTypeSpecific.className = GPBStringifySymbol(Tab),
        .number = RivalsRecommendResponse_TabRivals_FieldNumber_Tab,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RivalsRecommendResponse_TabRivals__storage_, tab),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RivalsRecommendResponse_TabRivals class]
                                     rootClass:[BattleRivalsRecommendApiRoot class]
                                          file:BattleRivalsRecommendApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RivalsRecommendResponse_TabRivals__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(RivalsRecommendResponse)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RivalsRecommendResponse_ResponseData

@implementation RivalsRecommendResponse_ResponseData

@dynamic hasRivals, rivals;
@dynamic tabsArray, tabsArray_Count;

typedef struct RivalsRecommendResponse_ResponseData__storage_ {
  uint32_t _has_storage_[1];
  RivalsRecommendResponse_TabRivals *rivals;
  NSMutableArray *tabsArray;
} RivalsRecommendResponse_ResponseData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rivals",
        .dataTypeSpecific.className = GPBStringifySymbol(RivalsRecommendResponse_TabRivals),
        .number = RivalsRecommendResponse_ResponseData_FieldNumber_Rivals,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RivalsRecommendResponse_ResponseData__storage_, rivals),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tabsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Tab),
        .number = RivalsRecommendResponse_ResponseData_FieldNumber_TabsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RivalsRecommendResponse_ResponseData__storage_, tabsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RivalsRecommendResponse_ResponseData class]
                                     rootClass:[BattleRivalsRecommendApiRoot class]
                                          file:BattleRivalsRecommendApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RivalsRecommendResponse_ResponseData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(RivalsRecommendResponse)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
